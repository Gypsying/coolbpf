/* automatically generated by rust-bindgen 0.59.2 */

pub const TASK_COMM_LEN: u32 = 16;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct example {
    pub pid: ::std::os::raw::c_int,
    pub comm: [::std::os::raw::c_uchar; 16usize],
    pub sport: __u16,
    pub dport: __u16,
    pub saddr: __u32,
    pub daddr: __u32,
}
#[test]
fn bindgen_test_layout_example() {
    assert_eq!(
        ::std::mem::size_of::<example>(),
        32usize,
        concat!("Size of: ", stringify!(example))
    );
    assert_eq!(
        ::std::mem::align_of::<example>(),
        4usize,
        concat!("Alignment of ", stringify!(example))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).pid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).comm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(comm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).sport as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(sport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).dport as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(dport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).saddr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(saddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<example>())).daddr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(example),
            "::",
            stringify!(daddr)
        )
    );
}
